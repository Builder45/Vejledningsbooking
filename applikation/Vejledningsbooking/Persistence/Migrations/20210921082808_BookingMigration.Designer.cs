// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vejledningsbooking.Persistence.Data;

namespace Vejledningsbooking.Persistence.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20210921082808_BookingMigration")]
    partial class BookingMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Vejledningsbooking.Domain.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookingVindueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SlutTidspunkt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTidspunkt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StuderendeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingVindueId");

                    b.HasIndex("StuderendeId");

                    b.ToTable("Bookinger");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.BookingVindue", b =>
                {
                    b.Property<int>("BookingVindueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KalenderHoldId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KalenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KalenderUnderviserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SlutTidspunkt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTidspunkt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnderviserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingVindueId");

                    b.HasIndex("UnderviserId");

                    b.HasIndex("KalenderUnderviserId", "KalenderHoldId");

                    b.ToTable("BookingVinduer");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Hold", b =>
                {
                    b.Property<int>("HoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("HoldId");

                    b.ToTable("Hold");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Kalender", b =>
                {
                    b.Property<int?>("UnderviserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HoldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UnderviserId", "HoldId");

                    b.HasIndex("HoldId");

                    b.ToTable("Kalendere");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Studerende", b =>
                {
                    b.Property<int>("StuderendeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.HasKey("StuderendeId");

                    b.ToTable("Studerende");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Underviser", b =>
                {
                    b.Property<int>("UnderviserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.HasKey("UnderviserId");

                    b.ToTable("Undervisere");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Booking", b =>
                {
                    b.HasOne("Vejledningsbooking.Domain.BookingVindue", "BookingVindue")
                        .WithMany("Bookinger")
                        .HasForeignKey("BookingVindueId");

                    b.HasOne("Vejledningsbooking.Domain.Studerende", null)
                        .WithMany("Bookinger")
                        .HasForeignKey("StuderendeId");

                    b.Navigation("BookingVindue");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.BookingVindue", b =>
                {
                    b.HasOne("Vejledningsbooking.Domain.Underviser", null)
                        .WithMany("BookingVinduer")
                        .HasForeignKey("UnderviserId");

                    b.HasOne("Vejledningsbooking.Domain.Kalender", "Kalender")
                        .WithMany("BookingVinduer")
                        .HasForeignKey("KalenderUnderviserId", "KalenderHoldId");

                    b.Navigation("Kalender");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Kalender", b =>
                {
                    b.HasOne("Vejledningsbooking.Domain.Hold", "Hold")
                        .WithMany("Kalendere")
                        .HasForeignKey("HoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vejledningsbooking.Domain.Underviser", "Underviser")
                        .WithMany("Kalendere")
                        .HasForeignKey("UnderviserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hold");

                    b.Navigation("Underviser");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.BookingVindue", b =>
                {
                    b.Navigation("Bookinger");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Hold", b =>
                {
                    b.Navigation("Kalendere");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Kalender", b =>
                {
                    b.Navigation("BookingVinduer");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Studerende", b =>
                {
                    b.Navigation("Bookinger");
                });

            modelBuilder.Entity("Vejledningsbooking.Domain.Underviser", b =>
                {
                    b.Navigation("BookingVinduer");

                    b.Navigation("Kalendere");
                });
#pragma warning restore 612, 618
        }
    }
}
